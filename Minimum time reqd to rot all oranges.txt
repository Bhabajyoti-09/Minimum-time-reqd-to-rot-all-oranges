class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int n=grid.size();
        int m=grid[0].size();
         vector<vector<int>> vis(n,vector<int>(m,0));       
        queue<pair<int,pair<int,int>>> q;
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2) {q.push({0,{i,j}});vis[i][j]=1;}
            }
        }
        int tim=0;

        while(!q.empty()){
            auto t=q.front().first;
            auto i=q.front().second.first;
            auto j=q.front().second.second;
            q.pop();
            tim=t;
            int rw[]={-1,0,1,0};
            int cl[]={0,-1,0,1};
            
            for(int k=0;k<4;k++){
                int row=rw[k]+i;
                int col=cl[k]+j;
                if(row>=0 && row<n && col>=0 && col<m  && vis[row][col]!=1 && grid[row][col]){
                    q.push({t+1,{row,col}});
                    vis[row][col]=1;
                }
            }
            
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis[i][j]!=1 && grid[i][j]==1) return -1;
            }
        }
        
        return tim;
        
    }
};